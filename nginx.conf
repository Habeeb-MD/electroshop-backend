user www-data;
worker_processes auto;
pid /run/nginx.pid;
error_log /var/log/nginx/error.log;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    ##
    # Basic Settings
    ##

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    ##
    # SSL Settings
    ##

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    ##
    # Logging Settings
    ##

    access_log /var/log/nginx/access.log main;

    ##
    # Gzip Settings
    ##

    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Define upstreams for each service
    upstream user_and_auth_service {
        server localhost:3000;
    }

    upstream product_service {
        server localhost:3001;
    }

    upstream cart_service {
        server localhost:3002;
    }

    upstream order_service {
        server localhost:3003;
    }

    upstream payment_service {
        server localhost:3004;
    }

    upstream notification_service {
        server localhost:3005;
    }

    server {
        listen 80;
        server_name your_domain.com;

        # Redirect all HTTP requests to HTTPS
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 81;
        server_name your_domain.com;

        # Common security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Content-Security-Policy "default-src 'self';" always;

        # Authentication subrequest
        location /api/auth/validateToken {
            proxy_pass http://user_and_auth_service/api/auth/validateToken;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
        }

        # User Service
        location /api/auth {
            proxy_pass http://user_and_auth_service;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
        }

        location /api/users {
            auth_request /api/auth/validateToken;

            # Store the auth response
            auth_request_set $auth_status $upstream_status;
            auth_request_set $auth_user $upstream_http_x_auth_user;

            # Pass the auth data to the upstream service as a separate header
            proxy_set_header X-Auth-User $auth_user;

            proxy_pass http://user_and_auth_service;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
        }

        # Product Service
        location ~ ^/api/(products|brands|product-types) {
            proxy_pass http://product_service;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
        }

        # Cart Service
        location /api/cart {
            auth_request /api/auth/validateToken;

            # Store the auth response
            auth_request_set $auth_status $upstream_status;
            auth_request_set $auth_user $upstream_http_x_auth_user;

            # Pass the auth data to the upstream service as a separate header
            proxy_set_header X-Auth-User $auth_user;

            proxy_pass http://cart_service;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
        }

        # Order Service (internal)
        location /api/orders {
            auth_request /api/auth/validateToken;
            # Store the auth response
            auth_request_set $auth_status $upstream_status;
            auth_request_set $auth_user $upstream_http_x_auth_user;

            # Pass the auth data to the upstream service as a separate header
            proxy_set_header X-Auth-User $auth_user;

            # allow 127.0.0.1;
            # deny all;
            proxy_pass http://order_service;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
        }

        # Payment Service (internal)
        location /api/transactions {
            auth_request /api/auth/validateToken;
            # Store the auth response
            auth_request_set $auth_status $upstream_status;
            auth_request_set $auth_user $upstream_http_x_auth_user;

            # Pass the auth data to the upstream service as a separate header
            proxy_set_header X-Auth-User $auth_user;

            # allow 127.0.0.1;
            # deny all;
            proxy_pass http://payment_service;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
        }

        # Notification Service
        location ~ ^/api/(notifications|templates) {
            auth_request /api/auth/validateToken;
            # Store the auth response
            auth_request_set $auth_status $upstream_status;
            auth_request_set $auth_user $upstream_http_x_auth_user;

            # Pass the auth data to the upstream service as a separate header
            proxy_set_header X-Auth-User $auth_user;

            proxy_pass http://notification_service;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
        }

        # Deny access to any other paths
        location / {
            return 404;
        }

        # Error pages
        error_page 401 = @error401;
        location @error401 {
            return 401 '{"error": "Unauthorized"}';
            default_type application/json;
        }

        error_page 404 = @error404;
        location @error404 {
            return 404 '{"error": "Not Found"}';
            default_type application/json;
        }

        error_page 500 502 503 504 = @error5xx;
        location @error5xx {
            return 500 '{"error": "Internal Server Error"}';
            default_type application/json;
        }
    }
}
